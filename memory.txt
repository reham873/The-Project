`timescale 1ns / 1ps


module memory (
    input wire clk,         
    input wire rst,         
    input wire [15:0] addr, 
    input wire [15:0] data_in,  
    input wire write_enable, 
    output reg [15:0] data_out ,
    integer i
);

    reg [15:0] mem [0:65535];

  
    always @(posedge clk) begin
        if (rst) begin
            for (i = 0; i < 65536; i = i + 1)
                mem[i] <= 16'h0000;
        end else begin
            if (!write_enable)
                data_out <= mem[addr];
            else
                mem[addr] <= data_in;
        end
    end

endmodule


module memory_tb;

    reg clk;
    reg rst;
    reg addr;
    reg data_in;
    reg write_enable; 
    wire data_out;

    memory dut (   

        .clk(clk),
        .rst(rst),
        .addr(addr),
        .data_in(data_in),
        .write_enable(write_enable),
        .data_out(data_out)
    );

    always #5 clk = ~clk;
 
endmodule
